// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...all]': RouteRecordInfo<'/[...all]', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '/auth': RouteRecordInfo<'/auth', '/auth', Record<never, never>, Record<never, never>>,
    '/auth/login': RouteRecordInfo<'/auth/login', '/auth/login', Record<never, never>, Record<never, never>>,
    '/auth/login-1': RouteRecordInfo<'/auth/login-1', '/auth/login-1', Record<never, never>, Record<never, never>>,
    '/auth/login-2': RouteRecordInfo<'/auth/login-2', '/auth/login-2', Record<never, never>, Record<never, never>>,
    '/auth/login-3': RouteRecordInfo<'/auth/login-3', '/auth/login-3', Record<never, never>, Record<never, never>>,
    '/auth/signup-1': RouteRecordInfo<'/auth/signup-1', '/auth/signup-1', Record<never, never>, Record<never, never>>,
    '/auth/signup-2': RouteRecordInfo<'/auth/signup-2', '/auth/signup-2', Record<never, never>, Record<never, never>>,
    '/auth/signup-3': RouteRecordInfo<'/auth/signup-3', '/auth/signup-3', Record<never, never>, Record<never, never>>,
    '/books': RouteRecordInfo<'/books', '/books', Record<never, never>, Record<never, never>>,
    '/books/': RouteRecordInfo<'/books/', '/books', Record<never, never>, Record<never, never>>,
    '/books/[bookUuid]/': RouteRecordInfo<'/books/[bookUuid]/', '/books/:bookUuid', { bookUuid: ParamValue<true> }, { bookUuid: ParamValue<false> }>,
    '/company/[companyUuid]': RouteRecordInfo<'/company/[companyUuid]', '/company/:companyUuid', { companyUuid: ParamValue<true> }, { companyUuid: ParamValue<false> }>,
    '/company/[companyUuid]/clients/': RouteRecordInfo<'/company/[companyUuid]/clients/', '/company/:companyUuid/clients', { companyUuid: ParamValue<true> }, { companyUuid: ParamValue<false> }>,
    '/company/[companyUuid]/clients/[clientUuid]': RouteRecordInfo<'/company/[companyUuid]/clients/[clientUuid]', '/company/:companyUuid/clients/:clientUuid', { companyUuid: ParamValue<true>, clientUuid: ParamValue<true> }, { companyUuid: ParamValue<false>, clientUuid: ParamValue<false> }>,
    '/company/[companyUuid]/clients/[clientUuid]/books/': RouteRecordInfo<'/company/[companyUuid]/clients/[clientUuid]/books/', '/company/:companyUuid/clients/:clientUuid/books', { companyUuid: ParamValue<true>, clientUuid: ParamValue<true> }, { companyUuid: ParamValue<false>, clientUuid: ParamValue<false> }>,
    '/company/[companyUuid]/clients/[clientUuid]/books/[bookUuid]': RouteRecordInfo<'/company/[companyUuid]/clients/[clientUuid]/books/[bookUuid]', '/company/:companyUuid/clients/:clientUuid/books/:bookUuid', { companyUuid: ParamValue<true>, clientUuid: ParamValue<true>, bookUuid: ParamValue<true> }, { companyUuid: ParamValue<false>, clientUuid: ParamValue<false>, bookUuid: ParamValue<false> }>,
    '/company/[companyUuid]/clients/[clientUuid]/informations': RouteRecordInfo<'/company/[companyUuid]/clients/[clientUuid]/informations', '/company/:companyUuid/clients/:clientUuid/informations', { companyUuid: ParamValue<true>, clientUuid: ParamValue<true> }, { companyUuid: ParamValue<false>, clientUuid: ParamValue<false> }>,
    '/company/[companyUuid]/clients_old': RouteRecordInfo<'/company/[companyUuid]/clients_old', '/company/:companyUuid/clients_old', { companyUuid: ParamValue<true> }, { companyUuid: ParamValue<false> }>,
    '/company/[companyUuid]/index_old': RouteRecordInfo<'/company/[companyUuid]/index_old', '/company/:companyUuid/index_old', { companyUuid: ParamValue<true> }, { companyUuid: ParamValue<false> }>,
    '/company/[companyUuid]/makers/': RouteRecordInfo<'/company/[companyUuid]/makers/', '/company/:companyUuid/makers', { companyUuid: ParamValue<true> }, { companyUuid: ParamValue<false> }>,
    '/error': RouteRecordInfo<'/error', '/error', Record<never, never>, Record<never, never>>,
    '/error/page-1': RouteRecordInfo<'/error/page-1', '/error/page-1', Record<never, never>, Record<never, never>>,
    '/error/page-2': RouteRecordInfo<'/error/page-2', '/error/page-2', Record<never, never>, Record<never, never>>,
    '/error/page-3': RouteRecordInfo<'/error/page-3', '/error/page-3', Record<never, never>, Record<never, never>>,
    '/error/page-4': RouteRecordInfo<'/error/page-4', '/error/page-4', Record<never, never>, Record<never, never>>,
    '/error/page-5': RouteRecordInfo<'/error/page-5', '/error/page-5', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
